## 什么是Linux容器？
  Linux® 容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。
  容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。

## 容器与虚拟化
  虚拟化是的许多操作系统可同时在单个系统上运行
  容器则可共享同一个操作系统内核，将应用进程与系统其他部分隔离开
  
## 容器开始具有实用性
  控制组（cgroups）是一项内核功能，能够控制和限制一个进程或多组进程的资源使用
  
## 容器是操作系统层虚拟化特征的一种抽象

##  什么是docker
  docker是指容器化技术，用于支持创建和使用Linux容器
  
Docker容器的优势
  模块化
    Docker容器化方法非常关注在不停止整个应用程序的情况下，单独截取部分应用程序进行更新或修复的能力。除了这种基于微服务的方法，您还可以菜哟过与面向服务的架构（SOA）
    类似地使用方法，在多个应用程序间共享进程
    
  层和镜像版本控制
    每个Docker镜像文件都包含多个层。这些层组合在一起，构成单个镜像。每当净下锅发生改变时，一个新的镜像层即被创建出来。用户每次发出命令时，都会创建一个新的镜像层。
    
    Docker重复使用这些层来构建新容器，借此帮助加快流程构建。镜像之间共享中间变化，从而进一步提升速度、尺寸以及效率。版本控制是镜像层本身自带的能力。
    
  回滚
    每个镜像都拥有多个层。比方说，如果你不喜欢迭代后的镜像版本，完全可以回滚到之前的版本。这一功能还支持敏捷开发方法，帮助持续实施集成和部署（CI/CD），使其在工具层面成为一种现实。
    
  快速部署
    启动和运行新硬件、实施部署并投入使用，基于 Docker 的容器可将部署时间缩短到几秒。
    
## 使用Docker时存在哪些限制？
  Docker本身非常适合用于管理单个容器。随着使用越来越多的容器和容器化应用程序，并把它们划分成数百个部分，很可能会导致管理和编排变得非常困难。
  需要对容器实施分组，以便跨所有容器提供网络、安全、遥测等服务，于是，kubernetes应运而生。
