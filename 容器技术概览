容器是轻量级的操作系统级虚拟化，可以让我们在一个资源隔离的进程中运行应用及其依赖项。运行应用程序所必需的组建都将打包成一个镜像并可以复用。
执行镜像并可以复用。执行镜像时，它运行在一个隔离环境中，并且不会共享宿主机的内存、CPU以及磁盘，这就保证了容器内进程不能监控容器外的任何进程

## 容器与虚拟机之间的差别
  虚拟机通常包含整个操作系统及其应用程序，同时也需要运行一个hypervisor来控制虚拟机
  
## 容器究竟解决了什么问题？
  运行时环境问题
  
## 容器优点
  1.敏捷环境
    容器技术最大的优点是创建容器实例比创建虚拟机示例快得多，容器轻量级的脚本可以从性能和大小方面减少开销
  2.提高生产力
    容器通过移除跨服务依赖和冲突提高了开发者的生产力。每个容器都可以看作是一个不同的微服务，因此可以独立升级，而不担心同步
  3.版本控制
    每个容器的镜像都有版本控制，这样就可以追踪不同版本的容器，监控版本之间的差异等等
  4.运行环境可移植
    容器封装了所有运行应用程序所必须的相关细节比如应用依赖以及操作系统
  5.标准化
    大多数容器基于开放标准，可以运行在所有主流Linux发行版、Microsoft平台等等
  6.安全
    容器之间的进程是相互隔离的，其中的基础设施亦是如此
    
## 容器的缺点
  1.复杂性增加
    随着容器及应用数量的增加，同时也伴随着复杂性的增加。在生产环境中管理如此之多的容器是一个极具挑战性的任务，可以使用Kubernetes和Mesos等工具管理具有一定规模数量的容器
    
  2.原生Linux支持
    大多数容器技术，比如Docker，基于Linux容器（LXC），相比于在原生Linux中运行容器，在Microsoft环境中运行容器略显笨拙，并且日常使用会带来复杂性
    
  3.不成熟
    容器技术在市场上是相对新的技术，需要时间来适应市场。开发者中的可用资源是有限的，如果某个开发者陷入某个问题，可能需要花些时间才能解决问题
    
## 容器分类
  1.操作系统容器
    操作系统层虚拟化是一种计算机虚拟化技术，这种技术将操作系统内核虚拟化，可以允许多个独立用户空间的存在，而不是只有一个。
    这些实例有时会被成为容器、虚拟引擎、虚拟专用服务器或是jails。从运行在容器中的程序角度来看，这些实例就如同真正的计算机
    
    容器共享宿主机的内核，但是提供用户空间隔离。我们可以像在宿主机操作系统上一样，在容器中安装、配置以及运行应用程序。
    分配给容器的资源仅对自己可见。任何虚拟机不能获取其他虚拟机的资源。
    
    当需要配置大量具有相同配置的操作系统时，操作系统容器就会非常有用。因此，容器有助于创建模版，可以用于创建与另一个操作系统类似风格的容器
    
    要创建操作系统容器，我们可以利用容器技术：LXC、OpenVZ、Linux VServer、BSD Jails和Solaris区域
    
  2.应用容器
    应用程序虚拟化是从其所执行的底层操作系统封装计算机程序的软件技术。一个完全虚拟化的应用，尽管仍像原来一样执行，但是并不会进行传统意义上的安装。
    应用在运行时的行为就像它直接与原始操作系统以及操作系统所管理的所有资源进行交互一样，但可以实现不同程度的隔离或者沙盒化。
    
    “虚拟化”是指被封装的工件（应用程序），这与其在硬件虚拟化中的含义截然不同，其中它涉及抽象的工件（物理硬件）
    
  应用程序容器旨在为单个进程进行打包和运行服务，而在OS容器中，可以运行多个服务和进程
